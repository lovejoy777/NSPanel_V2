 # NS-PANEL YAML BY LOVEJOY777.
# Version 15-04-2022 github: https://github.com/lovejoy777/NSpanel2.
#
# CREDIT & THANKS TO THE FOLLOWING.
# INITIAL WORK: Masto github: https://github.com/masto/NSPanel-Demo-Files.
# FULLY CUSTOMIZED FIRMWARE: Marcfager github: https://github.com/marcfager/nspanel-mf.


# Change substitutions for your entities,
# at the bottom of this yaml change the names for the Lights & music button names.

# SUBSTITUTIONS ##
substitutions:
  # general
  node_name: nspanel # $node_name
  device_name: NSPanel # $device_name

  wifi_ssid: !secret wifi_ssid # add in your esphome secrets file.
  wifi_password: !secret wifi_password # add in your esphome secrets file.
  ota_password: !secret ota_password # add in your esphome secrets file.
  nextion_update_url: !secret nextion_update_url # add in your esphome secrets file.

  # EDIT THE BELOW ENTITIES FOR YOURS...
  default_brightness: '70' # sets the startup brightness.
  # light entities.
  light_entity_01: light.kitchen_spots # my kitchen spots entity from HA.
  light_entity_02: light.unit_lights # my unit lights entity from HA.
  light_entity_03: light.unit_lights_2 # my porch light entity from HA.
  light_entity_04: light.lounge_spots # my lounge spots entity from HA.
  light_entity_05: light.lounge_lamp_1 # my lounge small lamp entity from HA.
  light_entity_06: light.lounge_lamp_2 # my lounge big lamp entity from HA.
  # sensors entities.
  sensor_water_temp_01: sensor.water_temp # HA hot water temperature sensor entity.
  sensor_target_temp_01: sensor.target_temp # HA climate target temperature entity.
  # binary sensors entities.
  binary_sensor_water_state_01: binary_sensor.water_state # my HA hot water state for status bar icons.
  binary_sensor_heating_state_01: binary_sensor.heating_state # my HA heating state for status bar icons.
  # climate entities.
  climate_01: climate.lounge # HA climate entity.
  # media player entities.
  media_player_entity_01: media_player.kitchen_speaker # google mini speaker media player entity.

# global varibles.
globals:

  - id: current_target_temp_val
    type: int
    restore_value: true
    initial_value: '14'

    # target temp slider value.
  - id: current_slider_val
    type: int
    restore_value: true
    initial_value: '0'

    # lights page slider value.
  - id: current_lightslider_val
    type: int
    restore_value: true
    initial_value: '125'

    # int from long pressing bottom 3 light buttons for dimming.
  - id: light_to_dim
    type: int
    restore_value: true
    initial_value: '1'

# EXTERNAL COMPONENTS ##
# Functionality for the Nextion display.
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

## ESP HOME CONFIG ##
esphome:
  name: $node_name
  comment: $device_name

# TYPE OF ESP BOARD.
esp32:
  board: esp32dev

## WIFI SETUP ##
# Wifi settings. Add these to your secrets.yaml. fast_connect must be true for a hidden ssid.
wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  power_save_mode: none

captive_portal:

# OTA (Over the air updates) password. Add to your secrets.yaml.
ota:
  password: $ota_password
  safe_mode: true
  reboot_timeout: 3min
  num_attempts: 3

## API SERVICES ##
api:
  services:

      # SERVICE TO UPDATE THE HMI FILE.
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

      # SERVICE SHOW NOTIFICATION ON HOME SCREEN.
    - service: notification
      variables:
        header: string
        message: string
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: |-
            id(disp1).set_component_text_printf("Home.head", "%s", header.c_str());
            id(disp1).set_component_text_printf("Home.body", "%s", message.c_str());
            id(disp1).send_command_printf("page 0");
        - delay: 0.5s # update page before playing tune.
        - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"
        - delay: 20s
        - lambda: |-
            id(disp1).set_component_text_printf("Home.head", " ");
            id(disp1).set_component_text_printf("Home.body", " ");

# UNUSED SERVICES TO KEEP FILE SIZE BELOW 68.4%.

      # SERVICE TO WAKE THE SCREEN.
#    - service: wakeup_screen
#      then:
#        - lambda: |-
#            id(disp1).send_command_printf("page 0");


      # SERVICE TO PLAY A RTTTL TONE.
#    - service: play_rtttl
#      variables:
#        song_str: string
#      then:
#        - rtttl.play:
#            rtttl: !lambda 'return song_str;'

      # SERVICE SET PAGE.
#    - service: set_page
#      variables:
#        page: int
#      then:
#        - lambda: id(disp1).send_command_printf("page %i", page);

    # SERVICE SEND COMMAND TO DISPLAY.
#    - service: send_command
#      variables:
#        cmd: string
#      then:
#        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

## LOGGER ##
logger:
#  baud_rate: 0
  level: DEBUG

# CONFIGURE INTERNAL BUZZER.
output:
    # BUZZER FOR PLAYING RINGTONES.
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# ENABLE RINGTONE MUSIC SUPPORT.
rtttl:
  id: buzzer
  output: buzzer_out

## TIME ##
# Time component that fetches time from Home Assistant and updates the display once a minute and when the display is ready at bootup (and time is available).
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: |-
              id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp1).set_component_text_printf("Home.date", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);
              id(disp1).set_component_text_printf("Screensaver.t0", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp1).set_component_text_printf("Screensaver.t3", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);

    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: |-
              id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp1).set_component_text_printf("Home.date", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);
              id(disp1).set_component_text_printf("Screensaver.t0", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp1).set_component_text_printf("Screensaver.t3", "%02i-%02i-%i",  id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);

# BINARY SENSOR ################################################################
binary_sensor:

    # LEFT BUTTON BELOW DISPLAY.
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1

    # RIGHT BUTTON BELOW DISPLAY.
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2

    # HOME UP BUTTON INCREASES CLIMATE TARGET TEMPERATURE IN HA.
  - platform: nextion
    name: $device_name Target Up
    page_id: 0
    component_id: 25
    internal: true
    on_click:
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            entity_id: $climate_01
            temperature: !lambda return id(current_target_temp_val) + 1;

    # HOME DOWN BUTTON DECREASES CLIMATE TARGET TEMPERATURE IN HA.
  - platform: nextion
    name: $device_name Target Dn
    page_id: 0
    component_id: 26
    internal: true
    on_click:
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            entity_id: $climate_01
            temperature: !lambda return id(current_target_temp_val) - 1;

    # LIGHTS SETS LIGHTS BRIGHTNESS FROM GLOBAL VARIBLE.
  - platform: nextion
    name: $device_name light_slider
    page_id: 2
    component_id: 41
    internal: true
    on_release: # on release of slider.
      then:
        # Slider dims light 4.
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 4;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light_entity_04
                    brightness: !lambda return id(current_lightslider_val);
        # Slider dims light 5.
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 5;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light_entity_05
                    brightness: !lambda return id(current_lightslider_val);
        # Slider dims light 6.
        - if:
            condition:
              lambda: 'return id(light_to_dim) == 6;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data:
                    entity_id: $light_entity_06
                    brightness: !lambda return id(current_lightslider_val);

## MUSIC PAGE BINARY SENSORS.

    # MUSIC PLAY/PAUSE HOTSPOT.
  - platform: nextion
    name: $device_name Music play pause
    page_id: 1
    component_id: 8
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.media_play_pause
          data:
            entity_id: $media_player_entity_01

    # MUSIC VOLUME DOWN HOTSPOT.
  - platform: nextion
    name: $device_name Music voldown
    page_id: 1
    component_id: 7
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.volume_down
          data:
            entity_id: $media_player_entity_01

    # MUSIC VOLUME UP HOTSPOT.
  - platform: nextion
    name: $device_name Music volup
    page_id: 1
    component_id: 9
    internal: true
    on_click:
      - homeassistant.service:
          service: media_player.volume_up
          data:
            entity_id: $media_player_entity_01

#   MUSIC STATION 1 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 1 button
    page_id: 1
    component_id: 24
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station1
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station1

    # MUSIC STATION 2 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 2 button
    page_id: 1
    component_id: 25
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station2
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station2

    # MUSIC STATION 3 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 3 button
    page_id: 1
    component_id: 26
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station3
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station3

    # MUSIC STATION 4 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 4 button
    page_id: 1
    component_id: 27
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station4
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station4

    # MUSIC STATION 5 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 5 button
    page_id: 1
    component_id: 28
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station5
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station5

    # MUSIC STATION 6 HOTSPOT.
  - platform: nextion
    name: $device_name Music Playlist 6 button
    page_id: 1
    component_id: 29
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.play_station6
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.play_station6

  # LIGHTS
    # LIGHTS SCENE 1 HOTSPOT.
  - platform: nextion
    name: $device_name Lights Scene 1 button
    page_id: 2
    component_id: 35
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.scene1
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.scene1

    # LIGHTS SCENE 2 HOTSPOT.
  - platform: nextion
    name: $device_name Lights Scene 2 button
    page_id: 2
    component_id: 36
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.scene2
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.scene2

      # LIGHTS SCENE 3 HOTSPOT.
  - platform: nextion
    name: $device_name Lights Scene 3 button
    page_id: 2
    component_id: 37
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.scene3
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.scene3

      # LIGHTS SCENE 4 HOTSPOT.
  - platform: nextion
    name: $device_name LightsScene 4 button
    page_id: 2
    component_id: 38
    internal: true
    on_click:
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.scene4
      - delay: 0.2s
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.scene4

## LIGHTS PAGE BINARY SENSORS.
    # LIGHT 1 HOTSPOT.
  - platform: nextion
    name: $device_name Light 0 button
    page_id: 2
    component_id: 13
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_01

    # LIGHT 2 HOTSPOT.
  - platform: nextion
    name: $device_name Light 1 button
    page_id: 2
    component_id: 14
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_02

    # LIGHT 3 HOTSPOT.
  - platform: nextion
    name: $device_name Light 2 button
    page_id: 2
    component_id: 19
    internal: true
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_03

    # LIGHT 4 HOTSPOT.
  - platform: nextion
    name: $device_name Light 3 button
    page_id: 2
    component_id: 20
    internal: true
    on_click: # toggles light 4.
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_04
    on_multi_click: # long press light 4, sets global for which light to dim.
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "4"
          - lambda: |-
              int symbol=35;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

    # LIGHT 5 HOTSPOT.
  - platform: nextion
    name: $device_name Light 4 button
    page_id: 2
    component_id: 21
    internal: true
    on_click: # toggles light 5.
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_05
    on_multi_click: # long press light 5, sets global for which light to dim.
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "5"
          - lambda: |-
              int symbol=36;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

    # LIGHT 6 HOTSPOT.
  - platform: nextion
    name: $device_name Light 5 button
    page_id: 2
    component_id: 22
    internal: true
    on_click: # toggles light 6.
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $light_entity_06
    on_multi_click: # long press light 6, sets global for which light to dim.
      - timing:
          - ON for at least 1s
        then:
          - globals.set:
              id: light_to_dim
              value: "6"
          - lambda: |-
              int symbol=37;
              id(disp1).send_command_printf("Lights.p0.pic=%i", symbol);

## SENSORS #####################################################################
sensor:

    # CURRENT PAGE DISPLAYED ON HMI.
#  - platform: nextion
#    name: $device_name Current display page
#    id: disp1_current_page
#    variable_name: dp
#    update_interval: 1s

## TEMPERATURE SENSORS
    # INTERNAL TEMPERATUE SENSOR, ADC VALUE.
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

    # INTERNAL TEMPERATUE SENSOR, adc reading converted to resistance (calculation).
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

    # INTERNAL TEMPERATUE SENSOR, resistance to temperature (calculation).
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.t1", "%.0f", id(temperature).state); # onboard temp (thermostat temp) to Home page.

    # HOME TEMPERATURE FEELS LIKE FROM HA.
  - platform: homeassistant
    id: temp_feelslike
    entity_id: sensor.home_temperature_feels_like
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.temp", "%.0f", id(temp_feelslike).state); # feels like temp to Home page from HA.

    # THERMOSTAT HOT WATER TEMP FROM HA.
  - platform: homeassistant
    id: hotwater_temperature
    entity_id: $sensor_water_temp_01
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            id(disp1).set_component_text_printf("Home.t0", "%.0f", id(hotwater_temperature).state); // hot water temp to Home page from HA.
            id(disp1).set_component_text_printf("Lights.t0", "%.0f", id(hotwater_temperature).state); // hot water temp to Lights page from HA.
            id(disp1).set_component_text_printf("Music.t1", "%.0f", id(hotwater_temperature).state); // hot water temp to Music page from HA.
            id(disp1).set_component_text_printf("Screensaver.t1", "%.0f", id(hotwater_temperature).state); // hot water temp to Screensaver page from HA.

    # THERMOSTAT CLIMATE TARGET TEMPERATURE FROM HA.
  - platform: homeassistant
    id: target_temperature
    entity_id: $sensor_target_temp_01
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - globals.set:
            id: current_target_temp_val
            value: !lambda 'return int(x);'
        - lambda: id(disp1).set_component_text_printf("Home.t2", "%i", id(current_target_temp_val)); # display target temp on Home page from HA.
          # change slider image.
        - lambda: |-
            int symbol=43; // 43 is 0 on slider.

            if (id(current_target_temp_val) < 4) { // if below 4 degrees c.
              symbol=43;
            } else if (id(current_target_temp_val) == 4) {
              symbol=44;
            } else if (id(current_target_temp_val) == 5) {
              symbol=45;
            } else if (id(current_target_temp_val) == 6) {
              symbol=46;
            } else if (id(current_target_temp_val) == 7) {
              symbol=47;
            } else if (id(current_target_temp_val) == 8) {
              symbol=48;
            } else if (id(current_target_temp_val) == 9) {
              symbol=49;
            } else if (id(current_target_temp_val) == 10) {
              symbol=50;
            } else if (id(current_target_temp_val) == 11) {
              symbol=51;
            } else if (id(current_target_temp_val) == 12) {
              symbol=52;
            } else if (id(current_target_temp_val) == 13) {
              symbol=53;
            } else if (id(current_target_temp_val) == 14) {
              symbol=54;
            } else if (id(current_target_temp_val) == 15) {
              symbol=55;
            } else if (id(current_target_temp_val) == 16) {
              symbol=56;
            } else if (id(current_target_temp_val) == 17) {
              symbol=57;
            } else if (id(current_target_temp_val) == 18) {
              symbol=58;
            } else if (id(current_target_temp_val) == 19) {
              symbol=59;
            } else if (id(current_target_temp_val) == 20) {
              symbol=60;
            } else if (id(current_target_temp_val) == 21) {
              symbol=61;
            } else if (id(current_target_temp_val) == 22) {
              symbol=62;
            } else if (id(current_target_temp_val) == 23) {
              symbol=63;
            } else if (id(current_target_temp_val) == 24) {
              symbol=64;
            } else if (id(current_target_temp_val) == 25) {
              symbol=65;
            } else if (id(current_target_temp_val) == 26) {
              symbol=66;
            } else if (id(current_target_temp_val) == 27) {
              symbol=67;
            }  else if (id(current_target_temp_val) > 27) { // if above 27 degrees c.
              symbol=67;
            }
            // sends the image to the display
            id(disp1).send_command_printf("Home.p3.pic=%i", symbol);

  # LIGHTS GET VALUE FROM SLIDER AND SET GLOBAL VARIBLE.
  # my light dimmer does not give out state so i can't control the slider from the HA brightness'
  # I've done it this way which also works with the selectable light_todim entity.
  # you will need to alter additional code to set this up including entity brightness.
  - platform: nextion
    id: lightslider
    name: $device_name lightslider
    variable_name: lightslider
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - globals.set:
            id: current_lightslider_val
            value: !lambda 'return int(x);'
          # send text field percentage of current_lightslider_val.
        - lambda: id(disp1).set_component_text_printf("Lights.t1", "%i", id(current_lightslider_val) *100 /255);

          # change slider image.
        - lambda: |-
            int symbol=43; // 43 is 0 on slider.

            if (id(current_lightslider_val) < 37) { // if below very low.
              symbol=43;
            } else if (id(current_lightslider_val) == 39) {
              symbol=44;
            } else if (id(current_lightslider_val) == 48) {
              symbol=45;
            } else if (id(current_lightslider_val) == 57) {
              symbol=46;
            } else if (id(current_lightslider_val) == 66) {
              symbol=47;
            } else if (id(current_lightslider_val) == 75) {
              symbol=48;
            } else if (id(current_lightslider_val) == 84) {
              symbol=49;
            } else if (id(current_lightslider_val) == 93) {
              symbol=50;
            } else if (id(current_lightslider_val) == 102) {
              symbol=51;
            } else if (id(current_lightslider_val) == 111) {
              symbol=52;
            } else if (id(current_lightslider_val) == 120) {
              symbol=53;
            } else if (id(current_lightslider_val) == 129) {
              symbol=54;
            } else if (id(current_lightslider_val) == 138) {
              symbol=55;
            } else if (id(current_lightslider_val) == 147) {
              symbol=56;
            } else if (id(current_lightslider_val) == 156) {
              symbol=57;
            } else if (id(current_lightslider_val) == 165) {
              symbol=58;
            } else if (id(current_lightslider_val) == 174) {
              symbol=59;
            } else if (id(current_lightslider_val) == 183) {
              symbol=60;
            } else if (id(current_lightslider_val) == 192) {
              symbol=61;
            } else if (id(current_lightslider_val) == 201) {
              symbol=62;
            } else if (id(current_lightslider_val) == 210) {
              symbol=63;
            } else if (id(current_lightslider_val) == 219) {
              symbol=64;
            } else if (id(current_lightslider_val) == 228) {
              symbol=65;
            } else if (id(current_lightslider_val) == 237) {
              symbol=66;
            } else if (id(current_lightslider_val) == 246) {
              symbol=67;
            } else if (id(current_lightslider_val) == 255) {
              symbol=67;
            }  else if (id(current_lightslider_val) > 255) { // if above max.
              symbol=67;
            }
            // sends the image to the display
            id(disp1).send_command_printf("Lights.p10.pic=%i", symbol);

    # WIFI SIGNAL STRENGTH SENSOR.
#  - platform: wifi_signal
#    name: $device_name WiFi Signal Sensor
#    update_interval: 60s

  # TARGET TEMPERATURE GET VALUE FROM CIRCLE SLIDER AND SET GLOBAL VARIBLE.
  - platform: nextion
    id: circleslider
    name: $device_name circleslider
    variable_name: sliderval
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - globals.set:
            id: current_slider_val
            value: !lambda 'return int(x);'
        - homeassistant.service:
            service: climate.set_temperature
            data_template:
              entity_id: $climate_01
              temperature: !lambda return id(current_slider_val);

## TEXT SENSOR #################################################################
text_sensor:

    # ESPHome version used to compile the app.
  - platform: version
    name: $device_name ESPHome Version

    # SUN SENSOR FROM HA.
  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun

    # HOME/THERMOSTAT HEATING ICONS.
  - platform: homeassistant
    entity_id: $binary_sensor_heating_state_01
    name: "Heating State"
    id: heating_state
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol=20; // 20 is a blank image
            int symbol1=38; // 72 off state image
            int symbol2=20; // 20 is a blank image
            if (id(heating_state).state == "on") {
              symbol=21; // heating on status icon
              symbol1=39; // blue line on
              symbol2=91; //dark icon for screensaver
            }
            id(disp1).send_command_printf("Home.heating_symbol.pic=%i", symbol); // heating status icon on Home page.
            id(disp1).send_command_printf("Home.p0.pic=%i", symbol1); // blue line indicator above switch 1 on Home page.
            id(disp1).send_command_printf("Lights.p1.pic=%i", symbol); // heating status icon on Lights Page.
            id(disp1).send_command_printf("Lights.p8.pic=%i", symbol1); // blue line indicator above switch 1 on Lights page.
            id(disp1).send_command_printf("Music.p10.pic=%i", symbol); // heating status icon on Music Page.
            id(disp1).send_command_printf("Music.p12.pic=%i", symbol1); // blue line indicator above switch 1 on Music page.
            id(disp1).send_command_printf("Screensaver.p0.pic=%i", symbol2); // heating dark status icon on Screensaver Page.

    # HOME/THERMOSTAT HOT WATER ICONS.
  - platform: homeassistant
    entity_id: $binary_sensor_water_state_01
    name: "Water State"
    id: water_state
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol=20; // 22 is a blank image
            int symbol1=38; // off state image
            int symbol2=20; // 22 is a blank image
            if (id(water_state).state == "on") {
              symbol=22;
              symbol1=39;
              symbol2=92; // dark icon for screensaver
            }
            id(disp1).send_command_printf("Home.water_symbol.pic=%i", symbol); // hot water status icon Home page
            id(disp1).send_command_printf("Home.p1.pic=%i", symbol1); // blue line indicator above switch 2 Home page
            id(disp1).send_command_printf("Lights.p2.pic=%i", symbol); // hot water status icon Lights page.
            id(disp1).send_command_printf("Lights.p9.pic=%i", symbol1); // blue line indicator above switch 2 Lights Page
            id(disp1).send_command_printf("Music.p11.pic=%i", symbol); // hot water status icon Music page.
            id(disp1).send_command_printf("Music.p13.pic=%i", symbol1); // blue line indicator above switch 2 Music Page
            id(disp1).send_command_printf("Screensaver.p1.pic=%i", symbol2); // hot water dark status icon screensaver page.

    # MUSIC PLAYER PLAYING ARTIST NAMEFROM HA.
  - platform: homeassistant
    id: music_artist
    entity_id: $media_player_entity_01
    attribute: media_artist
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Music.music_an", "%s", id(music_artist).state.c_str());

    # MUSIC PLAYER PLAYING SONG NAME FROM HA.
  - platform: homeassistant
    id: music_title
    entity_id: $media_player_entity_01
    attribute: media_title
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Music.music_sn", "%s", id(music_title).state.c_str());

## WEATHER ##
    # WEATHER SYMBOL FROM HA WEATHER ENTITY.
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.home
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol=4; // 4 is a empty box.
            if (id(weather_symbol).state == "clear-night") {
              symbol=5;
            } else if (id(weather_symbol).state == "cloudy") {
              symbol=6;
              if (id(sun_sun).state == "below_horizon") {
                symbol=6;
              }
            } else if (id(weather_symbol).state == "fog") {
              symbol=7;
            } else if (id(weather_symbol).state == "hail" || id(weather_symbol).state == "snowy-rainy") {
              symbol=11;
            } else if (id(weather_symbol).state == "lightning") {
              symbol=10;
            } else if (id(weather_symbol).state == "lightning-rainy" || id(weather_symbol).state == "exceptional") {
              symbol=17;
              if (id(sun_sun).state == "below_horizon") {
                symbol=16;
              }
            } else if (id(weather_symbol).state == "partlycloudy") {
              symbol=12;
              if (id(sun_sun).state == "below_horizon") {
                symbol=13;
              }
            } else if (id(weather_symbol).state == "pouring") {
              symbol=8;
            } else if (id(weather_symbol).state == "rainy") {
              symbol=14;
            } else if (id(weather_symbol).state == "snowy") {
              symbol=15;
            } else if (id(weather_symbol).state == "sunny") {
              symbol=18;
              if (id(sun_sun).state == "below_horizon") {
                symbol = 5;
              }
            } else if (id(weather_symbol).state == "windy" || id(weather_symbol).state == "windy-variant") {
              symbol=19;
            }
            id(disp1).send_command_printf("Home.weather_symbol.pic=%i", symbol);

## LIGHTS ##
    # LIGHTS SETUP LIGHT 1.
  - platform: homeassistant
    id: first
    entity_id: $light_entity_01
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 23;
            if (id(first).state == "on") {
              symbol=24;
            }
            id(disp1).send_command_printf("Lights.light0.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light0t", "Kitchen"); // CHANGE ME....

    # LIGHTS SETUP LIGHT 2.
  - platform: homeassistant
    id: second
    entity_id: $light_entity_02
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 25;
            if (id(second).state == "on") {
              symbol=26;
            }
            id(disp1).send_command_printf("Lights.light1.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light1t", "Units"); // CHANGE ME....

    # LIGHTS SETUP LIGHT 3.
  - platform: homeassistant
    id: third
    entity_id: $light_entity_03
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 27;
            if (id(third).state == "on") {
              symbol=28;
            }
            id(disp1).send_command_printf("Lights.light2.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light2t", "Porch"); // CHANGE ME....

    # LIGHTS SETUP LIGHT 4.
  - platform: homeassistant
    id: fourth
    entity_id: $light_entity_04
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 29;
            if (id(fourth).state == "on") {
              symbol=30;
            }
            id(disp1).send_command_printf("Lights.light3.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light3t", "Lounge"); // CHANGE ME....

    # LIGHTS SETUP LIGHT 5.
  - platform: homeassistant
    id: fith
    entity_id: $light_entity_05
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 31;
            if (id(fith).state == "on") {
              symbol=32;
            }
            id(disp1).send_command_printf("Lights.light4.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light4t", "Lamp"); // CHANGE ME....

    # LIGHTS SETUP LIGHT 6.
  - platform: homeassistant
    id: sixth
    entity_id: $light_entity_06
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol = 33;
            if (id(sixth).state == "on") {
              symbol=34;
            }
            id(disp1).send_command_printf("Lights.light5.pic=%i", symbol);
            id(disp1).set_component_text_printf("Lights.light5t", "Lamp"); // CHANGE ME....

## SWITCHES ####################################################################
switch:
    # global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display.
  - platform: template
    name: $device_name Nextion inited
    id: nextion_init
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

    # UPDATE TFT DISPLAY.
  - platform: template
    name: Update TFT display
    id: tft_update
    turn_on_action:
      - delay: 16ms
      - lambda: id(disp1).upload_tft();
      - switch.turn_off: tft_update

    # PHYSICAL SWITCH 1.
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22

    # PHYSICAL SWITCH 2.
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

    # Turn screen power on/off. Easy way to configure the screen power control, but this should not be used from HA, as all components must be re-initialized afterwards. For lights, names of lights etc. this practically means that the state must change once to happen.
  - platform: gpio
    name: $device_name Screen Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    internal: true

    # Disable Go to Home page-function on screen.
  - platform: template
    device_class: switch
    name: $device_name Disable go to home
    id: disp1_disgth
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.disgth.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.disgth.val=0");

    # Disable Dim-down-function on screen.
  - platform: template
    device_class: switch
    name: $device_name Disable dim-down
    id: disp1_disdim
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.disdim.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.disdim.val=0");

    # Disable Screensaver-function on screen.
  - platform: template
    device_class: switch
    name: $device_name Disable screensaver
    id: disp1_dissleep
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.dissleep.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.dissleep.val=0");

## NUMBERS #####################################################################
number:
    # SCREEN BRIGHTNESS.
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
        - lambda: 'id(disp1).send_command_printf("Home.brightness.val=%i", int(x));'

    # SCREEN BRIGHTNESS DIMMED DOWN.
  - platform: template
    name: $device_name Brightness dimdown
    id: brightness_dim
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 1
    set_action:
      then:
        - lambda: 'id(disp1).send_command_printf("Home.brightdd.val=%i", int(x));'

## UART ########################################################################
# UART FOR NEXTION DISPLAY.
uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

## DISPLAY #####################################################################
# CONFIGURATION FOR NEXTION DISPLAY.
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: $nextion_update_url
    on_setup:
      then:
        - number.set:
            id: brightness
            value: $default_brightness

        - lambda: id(disp1).send_command_printf("page 3"); # Loading page
        - wait_until:
            api.connected
        - delay: 0.5s
        - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"
        - delay: 0.5s
        - switch.template.publish:
            id: nextion_init
            state: on
        - lambda: id(disp1).send_command_printf("page 0"); // Home page
        - delay: 2s # gives the display time to update other components & set the home page.
          # sets the music button names on start up.
        - lambda: |-
            id(disp1).set_component_text_printf("Music.t2", "Smooth");  // CHANGE ME....
            id(disp1).set_component_text_printf("Music.t3", "BBC 1");   // CHANGE ME....
            id(disp1).set_component_text_printf("Music.t4", "BBC 2");   // CHANGE ME....
            id(disp1).set_component_text_printf("Music.t5", "BBC 4");   // CHANGE ME....
            id(disp1).set_component_text_printf("Music.t6", "Gem");     // CHANGE ME....
            id(disp1).set_component_text_printf("Music.t7", "Classic"); // CHANGE ME....
